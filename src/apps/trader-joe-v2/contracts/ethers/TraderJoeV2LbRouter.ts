/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace ILBRouter {
  export type LiquidityParametersStruct = {
    tokenX: PromiseOrValue<string>;
    tokenY: PromiseOrValue<string>;
    binStep: PromiseOrValue<BigNumberish>;
    amountX: PromiseOrValue<BigNumberish>;
    amountY: PromiseOrValue<BigNumberish>;
    amountXMin: PromiseOrValue<BigNumberish>;
    amountYMin: PromiseOrValue<BigNumberish>;
    activeIdDesired: PromiseOrValue<BigNumberish>;
    idSlippage: PromiseOrValue<BigNumberish>;
    deltaIds: PromiseOrValue<BigNumberish>[];
    distributionX: PromiseOrValue<BigNumberish>[];
    distributionY: PromiseOrValue<BigNumberish>[];
    to: PromiseOrValue<string>;
    refundTo: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type LiquidityParametersStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string,
    string,
    BigNumber,
  ] & {
    tokenX: string;
    tokenY: string;
    binStep: BigNumber;
    amountX: BigNumber;
    amountY: BigNumber;
    amountXMin: BigNumber;
    amountYMin: BigNumber;
    activeIdDesired: BigNumber;
    idSlippage: BigNumber;
    deltaIds: BigNumber[];
    distributionX: BigNumber[];
    distributionY: BigNumber[];
    to: string;
    refundTo: string;
    deadline: BigNumber;
  };

  export type PathStruct = {
    pairBinSteps: PromiseOrValue<BigNumberish>[];
    versions: PromiseOrValue<BigNumberish>[];
    tokenPath: PromiseOrValue<string>[];
  };

  export type PathStructOutput = [BigNumber[], number[], string[]] & {
    pairBinSteps: BigNumber[];
    versions: number[];
    tokenPath: string[];
  };
}

export interface TraderJoeV2LbRouterInterface extends utils.Interface {
  functions: {
    'addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))': FunctionFragment;
    'addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))': FunctionFragment;
    'createLBPair(address,address,uint24,uint16)': FunctionFragment;
    'getFactory()': FunctionFragment;
    'getIdFromPrice(address,uint256)': FunctionFragment;
    'getLegacyFactory()': FunctionFragment;
    'getLegacyRouter()': FunctionFragment;
    'getPriceFromId(address,uint24)': FunctionFragment;
    'getSwapIn(address,uint128,bool)': FunctionFragment;
    'getSwapOut(address,uint128,bool)': FunctionFragment;
    'getV1Factory()': FunctionFragment;
    'getWNATIVE()': FunctionFragment;
    'removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)': FunctionFragment;
    'removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)': FunctionFragment;
    'swapExactNATIVEForTokens(uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapExactTokensForNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapExactTokensForTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapNATIVEForExactTokens(uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapTokensForExactNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'swapTokensForExactTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)': FunctionFragment;
    'sweep(address,address,uint256)': FunctionFragment;
    'sweepLBToken(address,address,uint256[],uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addLiquidity'
      | 'addLiquidityNATIVE'
      | 'createLBPair'
      | 'getFactory'
      | 'getIdFromPrice'
      | 'getLegacyFactory'
      | 'getLegacyRouter'
      | 'getPriceFromId'
      | 'getSwapIn'
      | 'getSwapOut'
      | 'getV1Factory'
      | 'getWNATIVE'
      | 'removeLiquidity'
      | 'removeLiquidityNATIVE'
      | 'swapExactNATIVEForTokens'
      | 'swapExactNATIVEForTokensSupportingFeeOnTransferTokens'
      | 'swapExactTokensForNATIVE'
      | 'swapExactTokensForNATIVESupportingFeeOnTransferTokens'
      | 'swapExactTokensForTokens'
      | 'swapExactTokensForTokensSupportingFeeOnTransferTokens'
      | 'swapNATIVEForExactTokens'
      | 'swapTokensForExactNATIVE'
      | 'swapTokensForExactTokens'
      | 'sweep'
      | 'sweepLBToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addLiquidity', values: [ILBRouter.LiquidityParametersStruct]): string;
  encodeFunctionData(functionFragment: 'addLiquidityNATIVE', values: [ILBRouter.LiquidityParametersStruct]): string;
  encodeFunctionData(
    functionFragment: 'createLBPair',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getFactory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getIdFromPrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getLegacyFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLegacyRouter', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPriceFromId',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSwapIn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSwapOut',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getV1Factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWNATIVE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidityNATIVE',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactNATIVEForTokens',
    values: [PromiseOrValue<BigNumberish>, ILBRouter.PathStruct, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactNATIVEForTokensSupportingFeeOnTransferTokens',
    values: [PromiseOrValue<BigNumberish>, ILBRouter.PathStruct, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForNATIVE',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILBRouter.PathStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForNATIVESupportingFeeOnTransferTokens',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILBRouter.PathStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILBRouter.PathStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILBRouter.PathStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapNATIVEForExactTokens',
    values: [PromiseOrValue<BigNumberish>, ILBRouter.PathStruct, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactNATIVE',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILBRouter.PathStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokensForExactTokens',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILBRouter.PathStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sweep',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'sweepLBToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'addLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addLiquidityNATIVE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLBPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIdFromPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLegacyFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLegacyRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriceFromId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getV1Factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWNATIVE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidityNATIVE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactNATIVEForTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactNATIVEForTokensSupportingFeeOnTransferTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForNATIVE', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForNATIVESupportingFeeOnTransferTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapNATIVEForExactTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapTokensForExactNATIVE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapTokensForExactTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweepLBToken', data: BytesLike): Result;

  events: {};
}

export interface TraderJoeV2LbRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeV2LbRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addLiquidityNATIVE(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getFactory(overrides?: CallOverrides): Promise<[string] & { lbFactory: string }>;

    getIdFromPrice(
      pair: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    getLegacyFactory(overrides?: CallOverrides): Promise<[string] & { legacyLBfactory: string }>;

    getLegacyRouter(overrides?: CallOverrides): Promise<[string] & { legacyRouter: string }>;

    getPriceFromId(
      pair: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSwapIn(
      pair: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountIn: BigNumber;
        amountOutLeft: BigNumber;
        fee: BigNumber;
      }
    >;

    getSwapOut(
      pair: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountInLeft: BigNumber;
        amountOut: BigNumber;
        fee: BigNumber;
      }
    >;

    getV1Factory(overrides?: CallOverrides): Promise<[string] & { factoryV1: string }>;

    getWNATIVE(overrides?: CallOverrides): Promise<[string] & { wnative: string }>;

    removeLiquidity(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountXMin: PromiseOrValue<BigNumberish>,
      amountYMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeLiquidityNATIVE(
      token: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountTokenMin: PromiseOrValue<BigNumberish>,
      amountNATIVEMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactNATIVEForTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactNATIVEForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactTokensForNATIVE(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactTokensForNATIVESupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapNATIVEForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapTokensForExactNATIVE(
      amountNATIVEOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sweepLBToken(
      lbToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    liquidityParameters: ILBRouter.LiquidityParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addLiquidityNATIVE(
    liquidityParameters: ILBRouter.LiquidityParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createLBPair(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    activeId: PromiseOrValue<BigNumberish>,
    binStep: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getFactory(overrides?: CallOverrides): Promise<string>;

  getIdFromPrice(
    pair: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<number>;

  getLegacyFactory(overrides?: CallOverrides): Promise<string>;

  getLegacyRouter(overrides?: CallOverrides): Promise<string>;

  getPriceFromId(
    pair: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSwapIn(
    pair: PromiseOrValue<string>,
    amountOut: PromiseOrValue<BigNumberish>,
    swapForY: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountIn: BigNumber;
      amountOutLeft: BigNumber;
      fee: BigNumber;
    }
  >;

  getSwapOut(
    pair: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    swapForY: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountInLeft: BigNumber;
      amountOut: BigNumber;
      fee: BigNumber;
    }
  >;

  getV1Factory(overrides?: CallOverrides): Promise<string>;

  getWNATIVE(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    binStep: PromiseOrValue<BigNumberish>,
    amountXMin: PromiseOrValue<BigNumberish>,
    amountYMin: PromiseOrValue<BigNumberish>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeLiquidityNATIVE(
    token: PromiseOrValue<string>,
    binStep: PromiseOrValue<BigNumberish>,
    amountTokenMin: PromiseOrValue<BigNumberish>,
    amountNATIVEMin: PromiseOrValue<BigNumberish>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactNATIVEForTokens(
    amountOutMin: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactNATIVEForTokensSupportingFeeOnTransferTokens(
    amountOutMin: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactTokensForNATIVE(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactTokensForNATIVESupportingFeeOnTransferTokens(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapNATIVEForExactTokens(
    amountOut: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapTokensForExactNATIVE(
    amountNATIVEOut: PromiseOrValue<BigNumberish>,
    amountInMax: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: PromiseOrValue<BigNumberish>,
    amountInMax: PromiseOrValue<BigNumberish>,
    path: ILBRouter.PathStruct,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sweep(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sweepLBToken(
    lbToken: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        amountXAdded: BigNumber;
        amountYAdded: BigNumber;
        amountXLeft: BigNumber;
        amountYLeft: BigNumber;
        depositIds: BigNumber[];
        liquidityMinted: BigNumber[];
      }
    >;

    addLiquidityNATIVE(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        amountXAdded: BigNumber;
        amountYAdded: BigNumber;
        amountXLeft: BigNumber;
        amountYLeft: BigNumber;
        depositIds: BigNumber[];
        liquidityMinted: BigNumber[];
      }
    >;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getFactory(overrides?: CallOverrides): Promise<string>;

    getIdFromPrice(
      pair: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<number>;

    getLegacyFactory(overrides?: CallOverrides): Promise<string>;

    getLegacyRouter(overrides?: CallOverrides): Promise<string>;

    getPriceFromId(
      pair: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSwapIn(
      pair: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountIn: BigNumber;
        amountOutLeft: BigNumber;
        fee: BigNumber;
      }
    >;

    getSwapOut(
      pair: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountInLeft: BigNumber;
        amountOut: BigNumber;
        fee: BigNumber;
      }
    >;

    getV1Factory(overrides?: CallOverrides): Promise<string>;

    getWNATIVE(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountXMin: PromiseOrValue<BigNumberish>,
      amountYMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

    removeLiquidityNATIVE(
      token: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountTokenMin: PromiseOrValue<BigNumberish>,
      amountNATIVEMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountToken: BigNumber;
        amountNATIVE: BigNumber;
      }
    >;

    swapExactNATIVEForTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactNATIVEForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactTokensForNATIVE(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactTokensForNATIVESupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapNATIVEForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapTokensForExactNATIVE(
      amountNATIVEOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    sweepLBToken(
      lbToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addLiquidityNATIVE(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getIdFromPrice(
      pair: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLegacyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getLegacyRouter(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceFromId(
      pair: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSwapIn(
      pair: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSwapOut(
      pair: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getV1Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getWNATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountXMin: PromiseOrValue<BigNumberish>,
      amountYMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeLiquidityNATIVE(
      token: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountTokenMin: PromiseOrValue<BigNumberish>,
      amountNATIVEMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactNATIVEForTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactNATIVEForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactTokensForNATIVE(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactTokensForNATIVESupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapNATIVEForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapTokensForExactNATIVE(
      amountNATIVEOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sweepLBToken(
      lbToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addLiquidityNATIVE(
      liquidityParameters: ILBRouter.LiquidityParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIdFromPrice(
      pair: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLegacyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLegacyRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceFromId(
      pair: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSwapIn(
      pair: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSwapOut(
      pair: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getV1Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWNATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountXMin: PromiseOrValue<BigNumberish>,
      amountYMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeLiquidityNATIVE(
      token: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      amountTokenMin: PromiseOrValue<BigNumberish>,
      amountNATIVEMin: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactNATIVEForTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactNATIVEForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForNATIVE(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForNATIVESupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinNATIVE: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapNATIVEForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactNATIVE(
      amountNATIVEOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMax: PromiseOrValue<BigNumberish>,
      path: ILBRouter.PathStruct,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sweepLBToken(
      lbToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
