/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace FeeHelper {
  export type FeeParametersStruct = {
    binStep: PromiseOrValue<BigNumberish>;
    baseFactor: PromiseOrValue<BigNumberish>;
    filterPeriod: PromiseOrValue<BigNumberish>;
    decayPeriod: PromiseOrValue<BigNumberish>;
    reductionFactor: PromiseOrValue<BigNumberish>;
    variableFeeControl: PromiseOrValue<BigNumberish>;
    protocolShare: PromiseOrValue<BigNumberish>;
    maxVolatilityAccumulated: PromiseOrValue<BigNumberish>;
    volatilityAccumulated: PromiseOrValue<BigNumberish>;
    volatilityReference: PromiseOrValue<BigNumberish>;
    indexRef: PromiseOrValue<BigNumberish>;
    time: PromiseOrValue<BigNumberish>;
  };

  export type FeeParametersStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
  ] & {
    binStep: number;
    baseFactor: number;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    variableFeeControl: number;
    protocolShare: number;
    maxVolatilityAccumulated: number;
    volatilityAccumulated: number;
    volatilityReference: number;
    indexRef: number;
    time: number;
  };
}

export interface TraderJoeV2LbPairInterface extends utils.Interface {
  functions: {
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'burn(uint256[],uint256[],address)': FunctionFragment;
    'collectFees(address,uint256[])': FunctionFragment;
    'collectProtocolFees()': FunctionFragment;
    'factory()': FunctionFragment;
    'feeParameters()': FunctionFragment;
    'findFirstNonEmptyBinId(uint24,bool)': FunctionFragment;
    'flashLoan(address,address,uint256,bytes)': FunctionFragment;
    'forceDecay()': FunctionFragment;
    'getBin(uint24)': FunctionFragment;
    'getGlobalFees()': FunctionFragment;
    'getOracleParameters()': FunctionFragment;
    'getOracleSampleFrom(uint256)': FunctionFragment;
    'getReservesAndId()': FunctionFragment;
    'increaseOracleLength(uint16)': FunctionFragment;
    'initialize(address,address,uint24,uint16,bytes32)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'mint(uint256[],uint256[],uint256[],address)': FunctionFragment;
    'name()': FunctionFragment;
    'pendingFees(address,uint256[])': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[])': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setFeesParameters(bytes32)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'swap(bool,address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenX()': FunctionFragment;
    'tokenY()': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'burn'
      | 'collectFees'
      | 'collectProtocolFees'
      | 'factory'
      | 'feeParameters'
      | 'findFirstNonEmptyBinId'
      | 'flashLoan'
      | 'forceDecay'
      | 'getBin'
      | 'getGlobalFees'
      | 'getOracleParameters'
      | 'getOracleSampleFrom'
      | 'getReservesAndId'
      | 'increaseOracleLength'
      | 'initialize'
      | 'isApprovedForAll'
      | 'mint'
      | 'name'
      | 'pendingFees'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'setApprovalForAll'
      | 'setFeesParameters'
      | 'supportsInterface'
      | 'swap'
      | 'symbol'
      | 'tokenX'
      | 'tokenY'
      | 'totalSupply',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'collectFees',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'collectProtocolFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeParameters', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'findFirstNonEmptyBinId',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'flashLoan',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'forceDecay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBin', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getGlobalFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOracleParameters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOracleSampleFrom', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getReservesAndId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseOracleLength', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingFees',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeesParameters', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'swap', values: [PromiseOrValue<boolean>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectProtocolFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'findFirstNonEmptyBinId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGlobalFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracleParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracleSampleFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReservesAndId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseOracleLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeesParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment;
    'CompositionFee(address,address,uint256,uint256,uint256)': EventFragment;
    'DepositedToBin(address,address,uint256,uint256,uint256)': EventFragment;
    'FeesCollected(address,address,uint256,uint256)': EventFragment;
    'FlashLoan(address,address,address,uint256,uint256)': EventFragment;
    'OracleSizeIncreased(uint256,uint256)': EventFragment;
    'ProtocolFeesCollected(address,address,uint256,uint256)': EventFragment;
    'Swap(address,address,uint256,bool,uint256,uint256,uint256,uint256)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'WithdrawnFromBin(address,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CompositionFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositedToBin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FlashLoan'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleSizeIncreased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeesCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawnFromBin'): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  sender: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CompositionFeeEventObject {
  sender: string;
  recipient: string;
  id: BigNumber;
  feesX: BigNumber;
  feesY: BigNumber;
}
export type CompositionFeeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  CompositionFeeEventObject
>;

export type CompositionFeeEventFilter = TypedEventFilter<CompositionFeeEvent>;

export interface DepositedToBinEventObject {
  sender: string;
  recipient: string;
  id: BigNumber;
  amountX: BigNumber;
  amountY: BigNumber;
}
export type DepositedToBinEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  DepositedToBinEventObject
>;

export type DepositedToBinEventFilter = TypedEventFilter<DepositedToBinEvent>;

export interface FeesCollectedEventObject {
  sender: string;
  recipient: string;
  amountX: BigNumber;
  amountY: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<[string, string, BigNumber, BigNumber], FeesCollectedEventObject>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface FlashLoanEventObject {
  sender: string;
  receiver: string;
  token: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type FlashLoanEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], FlashLoanEventObject>;

export type FlashLoanEventFilter = TypedEventFilter<FlashLoanEvent>;

export interface OracleSizeIncreasedEventObject {
  previousSize: BigNumber;
  newSize: BigNumber;
}
export type OracleSizeIncreasedEvent = TypedEvent<[BigNumber, BigNumber], OracleSizeIncreasedEventObject>;

export type OracleSizeIncreasedEventFilter = TypedEventFilter<OracleSizeIncreasedEvent>;

export interface ProtocolFeesCollectedEventObject {
  sender: string;
  recipient: string;
  amountX: BigNumber;
  amountY: BigNumber;
}
export type ProtocolFeesCollectedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ProtocolFeesCollectedEventObject
>;

export type ProtocolFeesCollectedEventFilter = TypedEventFilter<ProtocolFeesCollectedEvent>;

export interface SwapEventObject {
  sender: string;
  recipient: string;
  id: BigNumber;
  swapForY: boolean;
  amountIn: BigNumber;
  amountOut: BigNumber;
  volatilityAccumulated: BigNumber;
  fees: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TransferBatchEventObject {
  sender: string;
  from: string;
  to: string;
  ids: BigNumber[];
  amounts: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  sender: string;
  from: string;
  to: string;
  id: BigNumber;
  amount: BigNumber;
}
export type TransferSingleEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], TransferSingleEventObject>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface WithdrawnFromBinEventObject {
  sender: string;
  recipient: string;
  id: BigNumber;
  amountX: BigNumber;
  amountY: BigNumber;
}
export type WithdrawnFromBinEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  WithdrawnFromBinEventObject
>;

export type WithdrawnFromBinEventFilter = TypedEventFilter<WithdrawnFromBinEvent>;

export interface TraderJoeV2LbPair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeV2LbPairInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      _accounts: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { batchBalances: BigNumber[] }>;

    burn(
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collectFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collectProtocolFees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeParameters(overrides?: CallOverrides): Promise<[FeeHelper.FeeParametersStructOutput]>;

    findFirstNonEmptyBinId(
      _id: PromiseOrValue<BigNumberish>,
      _swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    flashLoan(
      _receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    forceDecay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getBin(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { reserveX: BigNumber; reserveY: BigNumber }>;

    getGlobalFees(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        feesXTotal: BigNumber;
        feesYTotal: BigNumber;
        feesXProtocol: BigNumber;
        feesYProtocol: BigNumber;
      }
    >;

    getOracleParameters(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        oracleSampleLifetime: BigNumber;
        oracleSize: BigNumber;
        oracleActiveSize: BigNumber;
        oracleLastTimestamp: BigNumber;
        oracleId: BigNumber;
        min: BigNumber;
        max: BigNumber;
      }
    >;

    getOracleSampleFrom(
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeId: BigNumber;
        cumulativeVolatilityAccumulated: BigNumber;
        cumulativeBinCrossed: BigNumber;
      }
    >;

    getReservesAndId(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reserveX: BigNumber;
        reserveY: BigNumber;
        activeId: BigNumber;
      }
    >;

    increaseOracleLength(
      _newLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _tokenX: PromiseOrValue<string>,
      _tokenY: PromiseOrValue<string>,
      _activeId: PromiseOrValue<BigNumberish>,
      _sampleLifetime: PromiseOrValue<BigNumberish>,
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    mint(
      _ids: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pendingFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeesParameters(
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    swap(
      _swapForY: PromiseOrValue<boolean>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenX(overrides?: CallOverrides): Promise<[string]>;

    tokenY(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(
    _account: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfBatch(
    _accounts: PromiseOrValue<string>[],
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  burn(
    _ids: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collectFees(
    _account: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collectProtocolFees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeParameters(overrides?: CallOverrides): Promise<FeeHelper.FeeParametersStructOutput>;

  findFirstNonEmptyBinId(
    _id: PromiseOrValue<BigNumberish>,
    _swapForY: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<number>;

  flashLoan(
    _receiver: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  forceDecay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getBin(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { reserveX: BigNumber; reserveY: BigNumber }>;

  getGlobalFees(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      feesXTotal: BigNumber;
      feesYTotal: BigNumber;
      feesXProtocol: BigNumber;
      feesYProtocol: BigNumber;
    }
  >;

  getOracleParameters(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      oracleSampleLifetime: BigNumber;
      oracleSize: BigNumber;
      oracleActiveSize: BigNumber;
      oracleLastTimestamp: BigNumber;
      oracleId: BigNumber;
      min: BigNumber;
      max: BigNumber;
    }
  >;

  getOracleSampleFrom(
    _timeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      cumulativeId: BigNumber;
      cumulativeVolatilityAccumulated: BigNumber;
      cumulativeBinCrossed: BigNumber;
    }
  >;

  getReservesAndId(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      reserveX: BigNumber;
      reserveY: BigNumber;
      activeId: BigNumber;
    }
  >;

  increaseOracleLength(
    _newLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _tokenX: PromiseOrValue<string>,
    _tokenY: PromiseOrValue<string>,
    _activeId: PromiseOrValue<BigNumberish>,
    _sampleLifetime: PromiseOrValue<BigNumberish>,
    _packedFeeParameters: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  mint(
    _ids: PromiseOrValue<BigNumberish>[],
    _distributionX: PromiseOrValue<BigNumberish>[],
    _distributionY: PromiseOrValue<BigNumberish>[],
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pendingFees(
    _account: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

  safeBatchTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _spender: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeesParameters(
    _packedFeeParameters: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  swap(
    _swapForY: PromiseOrValue<boolean>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenX(overrides?: CallOverrides): Promise<string>;

  tokenY(overrides?: CallOverrides): Promise<string>;

  totalSupply(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      _accounts: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    burn(
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

    collectFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

    collectProtocolFees(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeParameters(overrides?: CallOverrides): Promise<FeeHelper.FeeParametersStructOutput>;

    findFirstNonEmptyBinId(
      _id: PromiseOrValue<BigNumberish>,
      _swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<number>;

    flashLoan(
      _receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    forceDecay(overrides?: CallOverrides): Promise<void>;

    getBin(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { reserveX: BigNumber; reserveY: BigNumber }>;

    getGlobalFees(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        feesXTotal: BigNumber;
        feesYTotal: BigNumber;
        feesXProtocol: BigNumber;
        feesYProtocol: BigNumber;
      }
    >;

    getOracleParameters(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        oracleSampleLifetime: BigNumber;
        oracleSize: BigNumber;
        oracleActiveSize: BigNumber;
        oracleLastTimestamp: BigNumber;
        oracleId: BigNumber;
        min: BigNumber;
        max: BigNumber;
      }
    >;

    getOracleSampleFrom(
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        cumulativeId: BigNumber;
        cumulativeVolatilityAccumulated: BigNumber;
        cumulativeBinCrossed: BigNumber;
      }
    >;

    getReservesAndId(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reserveX: BigNumber;
        reserveY: BigNumber;
        activeId: BigNumber;
      }
    >;

    increaseOracleLength(_newLength: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    initialize(
      _tokenX: PromiseOrValue<string>,
      _tokenY: PromiseOrValue<string>,
      _activeId: PromiseOrValue<BigNumberish>,
      _sampleLifetime: PromiseOrValue<BigNumberish>,
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    mint(
      _ids: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber[]] & { liquidityMinted: BigNumber[] }>;

    name(overrides?: CallOverrides): Promise<string>;

    pendingFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      _spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeesParameters(_packedFeeParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    swap(
      _swapForY: PromiseOrValue<boolean>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountXOut: BigNumber; amountYOut: BigNumber }>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenX(overrides?: CallOverrides): Promise<string>;

    tokenY(overrides?: CallOverrides): Promise<string>;

    totalSupply(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'ApprovalForAll(address,address,bool)'(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'CompositionFee(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      feesX?: null,
      feesY?: null,
    ): CompositionFeeEventFilter;
    CompositionFee(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      feesX?: null,
      feesY?: null,
    ): CompositionFeeEventFilter;

    'DepositedToBin(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amountX?: null,
      amountY?: null,
    ): DepositedToBinEventFilter;
    DepositedToBin(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amountX?: null,
      amountY?: null,
    ): DepositedToBinEventFilter;

    'FeesCollected(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amountX?: null,
      amountY?: null,
    ): FeesCollectedEventFilter;
    FeesCollected(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amountX?: null,
      amountY?: null,
    ): FeesCollectedEventFilter;

    'FlashLoan(address,address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      fee?: null,
    ): FlashLoanEventFilter;
    FlashLoan(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      fee?: null,
    ): FlashLoanEventFilter;

    'OracleSizeIncreased(uint256,uint256)'(previousSize?: null, newSize?: null): OracleSizeIncreasedEventFilter;
    OracleSizeIncreased(previousSize?: null, newSize?: null): OracleSizeIncreasedEventFilter;

    'ProtocolFeesCollected(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amountX?: null,
      amountY?: null,
    ): ProtocolFeesCollectedEventFilter;
    ProtocolFeesCollected(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amountX?: null,
      amountY?: null,
    ): ProtocolFeesCollectedEventFilter;

    'Swap(address,address,uint256,bool,uint256,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      swapForY?: null,
      amountIn?: null,
      amountOut?: null,
      volatilityAccumulated?: null,
      fees?: null,
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      swapForY?: null,
      amountIn?: null,
      amountOut?: null,
      volatilityAccumulated?: null,
      fees?: null,
    ): SwapEventFilter;

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      sender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      amounts?: null,
    ): TransferBatchEventFilter;
    TransferBatch(
      sender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      amounts?: null,
    ): TransferBatchEventFilter;

    'TransferSingle(address,address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
    ): TransferSingleEventFilter;
    TransferSingle(
      sender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
    ): TransferSingleEventFilter;

    'WithdrawnFromBin(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amountX?: null,
      amountY?: null,
    ): WithdrawnFromBinEventFilter;
    WithdrawnFromBin(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amountX?: null,
      amountY?: null,
    ): WithdrawnFromBinEventFilter;
  };

  estimateGas: {
    balanceOf(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      _accounts: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collectFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collectProtocolFees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeParameters(overrides?: CallOverrides): Promise<BigNumber>;

    findFirstNonEmptyBinId(
      _id: PromiseOrValue<BigNumberish>,
      _swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    flashLoan(
      _receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    forceDecay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getBin(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalFees(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleSampleFrom(_timeDelta: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getReservesAndId(overrides?: CallOverrides): Promise<BigNumber>;

    increaseOracleLength(
      _newLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _tokenX: PromiseOrValue<string>,
      _tokenY: PromiseOrValue<string>,
      _activeId: PromiseOrValue<BigNumberish>,
      _sampleLifetime: PromiseOrValue<BigNumberish>,
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      _ids: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pendingFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      _spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeesParameters(
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _swapForY: PromiseOrValue<boolean>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenX(overrides?: CallOverrides): Promise<BigNumber>;

    tokenY(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _account: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      _accounts: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collectFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collectProtocolFees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findFirstNonEmptyBinId(
      _id: PromiseOrValue<BigNumberish>,
      _swapForY: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    flashLoan(
      _receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    forceDecay(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getBin(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleSampleFrom(
      _timeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReservesAndId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseOracleLength(
      _newLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenX: PromiseOrValue<string>,
      _tokenY: PromiseOrValue<string>,
      _activeId: PromiseOrValue<BigNumberish>,
      _sampleLifetime: PromiseOrValue<BigNumberish>,
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mint(
      _ids: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingFees(
      _account: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeesParameters(
      _packedFeeParameters: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    swap(
      _swapForY: PromiseOrValue<boolean>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
