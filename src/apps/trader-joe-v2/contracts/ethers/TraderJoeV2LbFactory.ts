/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace ILBFactory {
  export type LBPairInformationStruct = {
    binStep: PromiseOrValue<BigNumberish>;
    LBPair: PromiseOrValue<string>;
    createdByOwner: PromiseOrValue<boolean>;
    ignoredForRouting: PromiseOrValue<boolean>;
  };

  export type LBPairInformationStructOutput = [number, string, boolean, boolean] & {
    binStep: number;
    LBPair: string;
    createdByOwner: boolean;
    ignoredForRouting: boolean;
  };
}

export interface TraderJoeV2LbFactoryInterface extends utils.Interface {
  functions: {
    'addQuoteAsset(address)': FunctionFragment;
    'becomeOwner()': FunctionFragment;
    'createLBPair(address,address,uint24,uint16)': FunctionFragment;
    'forceDecay(address)': FunctionFragment;
    'getAllBinSteps()': FunctionFragment;
    'getAllLBPairs(address,address)': FunctionFragment;
    'getFeeRecipient()': FunctionFragment;
    'getFlashLoanFee()': FunctionFragment;
    'getLBPairAtIndex(uint256)': FunctionFragment;
    'getLBPairImplementation()': FunctionFragment;
    'getLBPairInformation(address,address,uint256)': FunctionFragment;
    'getMaxFlashLoanFee()': FunctionFragment;
    'getMinBinStep()': FunctionFragment;
    'getNumberOfLBPairs()': FunctionFragment;
    'getNumberOfQuoteAssets()': FunctionFragment;
    'getOpenBinSteps()': FunctionFragment;
    'getPreset(uint256)': FunctionFragment;
    'getQuoteAssetAtIndex(uint256)': FunctionFragment;
    'isQuoteAsset(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'removePreset(uint16)': FunctionFragment;
    'removeQuoteAsset(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokePendingOwner()': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)': FunctionFragment;
    'setFlashLoanFee(uint256)': FunctionFragment;
    'setLBPairIgnored(address,address,uint16,bool)': FunctionFragment;
    'setLBPairImplementation(address)': FunctionFragment;
    'setPendingOwner(address)': FunctionFragment;
    'setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)': FunctionFragment;
    'setPresetOpenState(uint16,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addQuoteAsset'
      | 'becomeOwner'
      | 'createLBPair'
      | 'forceDecay'
      | 'getAllBinSteps'
      | 'getAllLBPairs'
      | 'getFeeRecipient'
      | 'getFlashLoanFee'
      | 'getLBPairAtIndex'
      | 'getLBPairImplementation'
      | 'getLBPairInformation'
      | 'getMaxFlashLoanFee'
      | 'getMinBinStep'
      | 'getNumberOfLBPairs'
      | 'getNumberOfQuoteAssets'
      | 'getOpenBinSteps'
      | 'getPreset'
      | 'getQuoteAssetAtIndex'
      | 'isQuoteAsset'
      | 'owner'
      | 'pendingOwner'
      | 'removePreset'
      | 'removeQuoteAsset'
      | 'renounceOwnership'
      | 'revokePendingOwner'
      | 'setFeeRecipient'
      | 'setFeesParametersOnPair'
      | 'setFlashLoanFee'
      | 'setLBPairIgnored'
      | 'setLBPairImplementation'
      | 'setPendingOwner'
      | 'setPreset'
      | 'setPresetOpenState',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addQuoteAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'becomeOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createLBPair',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'forceDecay', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAllBinSteps', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAllLBPairs',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getFeeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFlashLoanFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLBPairAtIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getLBPairImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getLBPairInformation',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getMaxFlashLoanFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinBinStep', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNumberOfLBPairs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNumberOfQuoteAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOpenBinSteps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPreset', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getQuoteAssetAtIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'isQuoteAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removePreset', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'removeQuoteAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokePendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFeesParametersOnPair',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setFlashLoanFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setLBPairIgnored',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setLBPairImplementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPendingOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setPreset',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPresetOpenState',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;

  decodeFunctionResult(functionFragment: 'addQuoteAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'becomeOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLBPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllBinSteps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllLBPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFlashLoanFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLBPairAtIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLBPairImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLBPairInformation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxFlashLoanFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinBinStep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumberOfLBPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumberOfQuoteAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOpenBinSteps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPreset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getQuoteAssetAtIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isQuoteAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removePreset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeQuoteAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokePendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeesParametersOnPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFlashLoanFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLBPairIgnored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLBPairImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPreset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPresetOpenState', data: BytesLike): Result;

  events: {
    'FeeRecipientSet(address,address)': EventFragment;
    'FlashLoanFeeSet(uint256,uint256)': EventFragment;
    'LBPairCreated(address,address,uint256,address,uint256)': EventFragment;
    'LBPairIgnoredStateChanged(address,bool)': EventFragment;
    'LBPairImplementationSet(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PendingOwnerSet(address)': EventFragment;
    'PresetOpenStateChanged(uint256,bool)': EventFragment;
    'PresetRemoved(uint256)': EventFragment;
    'PresetSet(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'QuoteAssetAdded(address)': EventFragment;
    'QuoteAssetRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeeRecipientSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FlashLoanFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LBPairCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LBPairIgnoredStateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LBPairImplementationSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingOwnerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PresetOpenStateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PresetRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PresetSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuoteAssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuoteAssetRemoved'): EventFragment;
}

export interface FeeRecipientSetEventObject {
  oldRecipient: string;
  newRecipient: string;
}
export type FeeRecipientSetEvent = TypedEvent<[string, string], FeeRecipientSetEventObject>;

export type FeeRecipientSetEventFilter = TypedEventFilter<FeeRecipientSetEvent>;

export interface FlashLoanFeeSetEventObject {
  oldFlashLoanFee: BigNumber;
  newFlashLoanFee: BigNumber;
}
export type FlashLoanFeeSetEvent = TypedEvent<[BigNumber, BigNumber], FlashLoanFeeSetEventObject>;

export type FlashLoanFeeSetEventFilter = TypedEventFilter<FlashLoanFeeSetEvent>;

export interface LBPairCreatedEventObject {
  tokenX: string;
  tokenY: string;
  binStep: BigNumber;
  LBPair: string;
  pid: BigNumber;
}
export type LBPairCreatedEvent = TypedEvent<[string, string, BigNumber, string, BigNumber], LBPairCreatedEventObject>;

export type LBPairCreatedEventFilter = TypedEventFilter<LBPairCreatedEvent>;

export interface LBPairIgnoredStateChangedEventObject {
  LBPair: string;
  ignored: boolean;
}
export type LBPairIgnoredStateChangedEvent = TypedEvent<[string, boolean], LBPairIgnoredStateChangedEventObject>;

export type LBPairIgnoredStateChangedEventFilter = TypedEventFilter<LBPairIgnoredStateChangedEvent>;

export interface LBPairImplementationSetEventObject {
  oldLBPairImplementation: string;
  LBPairImplementation: string;
}
export type LBPairImplementationSetEvent = TypedEvent<[string, string], LBPairImplementationSetEventObject>;

export type LBPairImplementationSetEventFilter = TypedEventFilter<LBPairImplementationSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingOwnerSetEventObject {
  pendingOwner: string;
}
export type PendingOwnerSetEvent = TypedEvent<[string], PendingOwnerSetEventObject>;

export type PendingOwnerSetEventFilter = TypedEventFilter<PendingOwnerSetEvent>;

export interface PresetOpenStateChangedEventObject {
  binStep: BigNumber;
  isOpen: boolean;
}
export type PresetOpenStateChangedEvent = TypedEvent<[BigNumber, boolean], PresetOpenStateChangedEventObject>;

export type PresetOpenStateChangedEventFilter = TypedEventFilter<PresetOpenStateChangedEvent>;

export interface PresetRemovedEventObject {
  binStep: BigNumber;
}
export type PresetRemovedEvent = TypedEvent<[BigNumber], PresetRemovedEventObject>;

export type PresetRemovedEventFilter = TypedEventFilter<PresetRemovedEvent>;

export interface PresetSetEventObject {
  binStep: BigNumber;
  baseFactor: BigNumber;
  filterPeriod: BigNumber;
  decayPeriod: BigNumber;
  reductionFactor: BigNumber;
  variableFeeControl: BigNumber;
  protocolShare: BigNumber;
  maxVolatilityAccumulator: BigNumber;
}
export type PresetSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PresetSetEventObject
>;

export type PresetSetEventFilter = TypedEventFilter<PresetSetEvent>;

export interface QuoteAssetAddedEventObject {
  quoteAsset: string;
}
export type QuoteAssetAddedEvent = TypedEvent<[string], QuoteAssetAddedEventObject>;

export type QuoteAssetAddedEventFilter = TypedEventFilter<QuoteAssetAddedEvent>;

export interface QuoteAssetRemovedEventObject {
  quoteAsset: string;
}
export type QuoteAssetRemovedEvent = TypedEvent<[string], QuoteAssetRemovedEventObject>;

export type QuoteAssetRemovedEventFilter = TypedEventFilter<QuoteAssetRemovedEvent>;

export interface TraderJoeV2LbFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeV2LbFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addQuoteAsset(
      quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    becomeOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    forceDecay(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAllBinSteps(overrides?: CallOverrides): Promise<[BigNumber[]] & { binStepWithPreset: BigNumber[] }>;

    getAllLBPairs(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [ILBFactory.LBPairInformationStructOutput[]] & {
        lbPairsAvailable: ILBFactory.LBPairInformationStructOutput[];
      }
    >;

    getFeeRecipient(overrides?: CallOverrides): Promise<[string] & { feeRecipient: string }>;

    getFlashLoanFee(overrides?: CallOverrides): Promise<[BigNumber] & { flashLoanFee: BigNumber }>;

    getLBPairAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string] & { lbPair: string }>;

    getLBPairImplementation(overrides?: CallOverrides): Promise<[string] & { lbPairImplementation: string }>;

    getLBPairInformation(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [ILBFactory.LBPairInformationStructOutput] & {
        lbPairInformation: ILBFactory.LBPairInformationStructOutput;
      }
    >;

    getMaxFlashLoanFee(overrides?: CallOverrides): Promise<[BigNumber] & { maxFee: BigNumber }>;

    getMinBinStep(overrides?: CallOverrides): Promise<[BigNumber] & { minBinStep: BigNumber }>;

    getNumberOfLBPairs(overrides?: CallOverrides): Promise<[BigNumber] & { lbPairNumber: BigNumber }>;

    getNumberOfQuoteAssets(overrides?: CallOverrides): Promise<[BigNumber] & { numberOfQuoteAssets: BigNumber }>;

    getOpenBinSteps(overrides?: CallOverrides): Promise<[BigNumber[]] & { openBinStep: BigNumber[] }>;

    getPreset(
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        baseFactor: BigNumber;
        filterPeriod: BigNumber;
        decayPeriod: BigNumber;
        reductionFactor: BigNumber;
        variableFeeControl: BigNumber;
        protocolShare: BigNumber;
        maxVolatilityAccumulator: BigNumber;
        isOpen: boolean;
      }
    >;

    getQuoteAssetAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string] & { asset: string }>;

    isQuoteAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & { isQuote: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    removePreset(
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeQuoteAsset(
      quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revokePendingOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setFeeRecipient(
      feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeesParametersOnPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFlashLoanFee(
      flashLoanFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLBPairIgnored(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      ignored: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLBPairImplementation(
      newLBPairImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPreset(
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPresetOpenState(
      binStep: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addQuoteAsset(
    quoteAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  becomeOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  createLBPair(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    activeId: PromiseOrValue<BigNumberish>,
    binStep: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  forceDecay(
    pair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAllBinSteps(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllLBPairs(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<ILBFactory.LBPairInformationStructOutput[]>;

  getFeeRecipient(overrides?: CallOverrides): Promise<string>;

  getFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

  getLBPairAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getLBPairImplementation(overrides?: CallOverrides): Promise<string>;

  getLBPairInformation(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    binStep: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<ILBFactory.LBPairInformationStructOutput>;

  getMaxFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMinBinStep(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfLBPairs(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfQuoteAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getOpenBinSteps(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPreset(
    binStep: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      baseFactor: BigNumber;
      filterPeriod: BigNumber;
      decayPeriod: BigNumber;
      reductionFactor: BigNumber;
      variableFeeControl: BigNumber;
      protocolShare: BigNumber;
      maxVolatilityAccumulator: BigNumber;
      isOpen: boolean;
    }
  >;

  getQuoteAssetAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  isQuoteAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  removePreset(
    binStep: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeQuoteAsset(
    quoteAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revokePendingOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setFeeRecipient(
    feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeesParametersOnPair(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    binStep: PromiseOrValue<BigNumberish>,
    baseFactor: PromiseOrValue<BigNumberish>,
    filterPeriod: PromiseOrValue<BigNumberish>,
    decayPeriod: PromiseOrValue<BigNumberish>,
    reductionFactor: PromiseOrValue<BigNumberish>,
    variableFeeControl: PromiseOrValue<BigNumberish>,
    protocolShare: PromiseOrValue<BigNumberish>,
    maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFlashLoanFee(
    flashLoanFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLBPairIgnored(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    binStep: PromiseOrValue<BigNumberish>,
    ignored: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLBPairImplementation(
    newLBPairImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPendingOwner(
    pendingOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPreset(
    binStep: PromiseOrValue<BigNumberish>,
    baseFactor: PromiseOrValue<BigNumberish>,
    filterPeriod: PromiseOrValue<BigNumberish>,
    decayPeriod: PromiseOrValue<BigNumberish>,
    reductionFactor: PromiseOrValue<BigNumberish>,
    variableFeeControl: PromiseOrValue<BigNumberish>,
    protocolShare: PromiseOrValue<BigNumberish>,
    maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
    isOpen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPresetOpenState(
    binStep: PromiseOrValue<BigNumberish>,
    isOpen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addQuoteAsset(quoteAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    becomeOwner(overrides?: CallOverrides): Promise<void>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    forceDecay(pair: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getAllBinSteps(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAllLBPairs(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<ILBFactory.LBPairInformationStructOutput[]>;

    getFeeRecipient(overrides?: CallOverrides): Promise<string>;

    getFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getLBPairAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getLBPairImplementation(overrides?: CallOverrides): Promise<string>;

    getLBPairInformation(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<ILBFactory.LBPairInformationStructOutput>;

    getMaxFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinBinStep(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfLBPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfQuoteAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenBinSteps(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPreset(
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        baseFactor: BigNumber;
        filterPeriod: BigNumber;
        decayPeriod: BigNumber;
        reductionFactor: BigNumber;
        variableFeeControl: BigNumber;
        protocolShare: BigNumber;
        maxVolatilityAccumulator: BigNumber;
        isOpen: boolean;
      }
    >;

    getQuoteAssetAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    isQuoteAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    removePreset(binStep: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    removeQuoteAsset(quoteAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokePendingOwner(overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(feeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFeesParametersOnPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFlashLoanFee(flashLoanFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLBPairIgnored(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      ignored: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLBPairImplementation(newLBPairImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPendingOwner(pendingOwner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPreset(
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPresetOpenState(
      binStep: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'FeeRecipientSet(address,address)'(oldRecipient?: null, newRecipient?: null): FeeRecipientSetEventFilter;
    FeeRecipientSet(oldRecipient?: null, newRecipient?: null): FeeRecipientSetEventFilter;

    'FlashLoanFeeSet(uint256,uint256)'(oldFlashLoanFee?: null, newFlashLoanFee?: null): FlashLoanFeeSetEventFilter;
    FlashLoanFeeSet(oldFlashLoanFee?: null, newFlashLoanFee?: null): FlashLoanFeeSetEventFilter;

    'LBPairCreated(address,address,uint256,address,uint256)'(
      tokenX?: PromiseOrValue<string> | null,
      tokenY?: PromiseOrValue<string> | null,
      binStep?: PromiseOrValue<BigNumberish> | null,
      LBPair?: null,
      pid?: null,
    ): LBPairCreatedEventFilter;
    LBPairCreated(
      tokenX?: PromiseOrValue<string> | null,
      tokenY?: PromiseOrValue<string> | null,
      binStep?: PromiseOrValue<BigNumberish> | null,
      LBPair?: null,
      pid?: null,
    ): LBPairCreatedEventFilter;

    'LBPairIgnoredStateChanged(address,bool)'(
      LBPair?: PromiseOrValue<string> | null,
      ignored?: null,
    ): LBPairIgnoredStateChangedEventFilter;
    LBPairIgnoredStateChanged(
      LBPair?: PromiseOrValue<string> | null,
      ignored?: null,
    ): LBPairIgnoredStateChangedEventFilter;

    'LBPairImplementationSet(address,address)'(
      oldLBPairImplementation?: null,
      LBPairImplementation?: null,
    ): LBPairImplementationSetEventFilter;
    LBPairImplementationSet(
      oldLBPairImplementation?: null,
      LBPairImplementation?: null,
    ): LBPairImplementationSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PendingOwnerSet(address)'(pendingOwner?: PromiseOrValue<string> | null): PendingOwnerSetEventFilter;
    PendingOwnerSet(pendingOwner?: PromiseOrValue<string> | null): PendingOwnerSetEventFilter;

    'PresetOpenStateChanged(uint256,bool)'(
      binStep?: PromiseOrValue<BigNumberish> | null,
      isOpen?: PromiseOrValue<boolean> | null,
    ): PresetOpenStateChangedEventFilter;
    PresetOpenStateChanged(
      binStep?: PromiseOrValue<BigNumberish> | null,
      isOpen?: PromiseOrValue<boolean> | null,
    ): PresetOpenStateChangedEventFilter;

    'PresetRemoved(uint256)'(binStep?: PromiseOrValue<BigNumberish> | null): PresetRemovedEventFilter;
    PresetRemoved(binStep?: PromiseOrValue<BigNumberish> | null): PresetRemovedEventFilter;

    'PresetSet(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      binStep?: PromiseOrValue<BigNumberish> | null,
      baseFactor?: null,
      filterPeriod?: null,
      decayPeriod?: null,
      reductionFactor?: null,
      variableFeeControl?: null,
      protocolShare?: null,
      maxVolatilityAccumulator?: null,
    ): PresetSetEventFilter;
    PresetSet(
      binStep?: PromiseOrValue<BigNumberish> | null,
      baseFactor?: null,
      filterPeriod?: null,
      decayPeriod?: null,
      reductionFactor?: null,
      variableFeeControl?: null,
      protocolShare?: null,
      maxVolatilityAccumulator?: null,
    ): PresetSetEventFilter;

    'QuoteAssetAdded(address)'(quoteAsset?: PromiseOrValue<string> | null): QuoteAssetAddedEventFilter;
    QuoteAssetAdded(quoteAsset?: PromiseOrValue<string> | null): QuoteAssetAddedEventFilter;

    'QuoteAssetRemoved(address)'(quoteAsset?: PromiseOrValue<string> | null): QuoteAssetRemovedEventFilter;
    QuoteAssetRemoved(quoteAsset?: PromiseOrValue<string> | null): QuoteAssetRemovedEventFilter;
  };

  estimateGas: {
    addQuoteAsset(
      quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    becomeOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    forceDecay(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAllBinSteps(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLBPairs(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getLBPairAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getLBPairImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getLBPairInformation(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMaxFlashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinBinStep(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfLBPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfQuoteAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenBinSteps(overrides?: CallOverrides): Promise<BigNumber>;

    getPreset(binStep: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteAssetAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isQuoteAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    removePreset(
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeQuoteAsset(
      quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokePendingOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setFeeRecipient(
      feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeesParametersOnPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFlashLoanFee(
      flashLoanFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLBPairIgnored(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      ignored: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLBPairImplementation(
      newLBPairImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPreset(
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPresetOpenState(
      binStep: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addQuoteAsset(
      quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    becomeOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    createLBPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      activeId: PromiseOrValue<BigNumberish>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    forceDecay(
      pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAllBinSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllLBPairs(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFlashLoanFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLBPairAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLBPairImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLBPairInformation(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMaxFlashLoanFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinBinStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfLBPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfQuoteAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpenBinSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPreset(binStep: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteAssetAtIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isQuoteAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePreset(
      binStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeQuoteAsset(
      quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revokePendingOwner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setFeeRecipient(
      feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeesParametersOnPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFlashLoanFee(
      flashLoanFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLBPairIgnored(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      binStep: PromiseOrValue<BigNumberish>,
      ignored: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLBPairImplementation(
      newLBPairImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPreset(
      binStep: PromiseOrValue<BigNumberish>,
      baseFactor: PromiseOrValue<BigNumberish>,
      filterPeriod: PromiseOrValue<BigNumberish>,
      decayPeriod: PromiseOrValue<BigNumberish>,
      reductionFactor: PromiseOrValue<BigNumberish>,
      variableFeeControl: PromiseOrValue<BigNumberish>,
      protocolShare: PromiseOrValue<BigNumberish>,
      maxVolatilityAccumulator: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPresetOpenState(
      binStep: PromiseOrValue<BigNumberish>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
