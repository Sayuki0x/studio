/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace LBQuoter {
  export type QuoteStruct = {
    route: PromiseOrValue<string>[];
    pairs: PromiseOrValue<string>[];
    binSteps: PromiseOrValue<BigNumberish>[];
    versions: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
    virtualAmountsWithoutSlippage: PromiseOrValue<BigNumberish>[];
    fees: PromiseOrValue<BigNumberish>[];
  };

  export type QuoteStructOutput = [string[], string[], BigNumber[], number[], BigNumber[], BigNumber[], BigNumber[]] & {
    route: string[];
    pairs: string[];
    binSteps: BigNumber[];
    versions: number[];
    amounts: BigNumber[];
    virtualAmountsWithoutSlippage: BigNumber[];
    fees: BigNumber[];
  };
}

export interface TraderJoeV2LbQuoterInterface extends utils.Interface {
  functions: {
    'findBestPathFromAmountIn(address[],uint128)': FunctionFragment;
    'findBestPathFromAmountOut(address[],uint128)': FunctionFragment;
    'getFactoryV1()': FunctionFragment;
    'getFactoryV2()': FunctionFragment;
    'getLegacyFactoryV2()': FunctionFragment;
    'getLegacyRouterV2()': FunctionFragment;
    'getRouterV2()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'findBestPathFromAmountIn'
      | 'findBestPathFromAmountOut'
      | 'getFactoryV1'
      | 'getFactoryV2'
      | 'getLegacyFactoryV2'
      | 'getLegacyRouterV2'
      | 'getRouterV2',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'findBestPathFromAmountIn',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'findBestPathFromAmountOut',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getFactoryV1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFactoryV2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLegacyFactoryV2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLegacyRouterV2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRouterV2', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'findBestPathFromAmountIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'findBestPathFromAmountOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFactoryV1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFactoryV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLegacyFactoryV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLegacyRouterV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRouterV2', data: BytesLike): Result;

  events: {};
}

export interface TraderJoeV2LbQuoter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeV2LbQuoterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    findBestPathFromAmountIn(
      route: PromiseOrValue<string>[],
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[LBQuoter.QuoteStructOutput] & { quote: LBQuoter.QuoteStructOutput }>;

    findBestPathFromAmountOut(
      route: PromiseOrValue<string>[],
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[LBQuoter.QuoteStructOutput] & { quote: LBQuoter.QuoteStructOutput }>;

    getFactoryV1(overrides?: CallOverrides): Promise<[string] & { factoryV1: string }>;

    getFactoryV2(overrides?: CallOverrides): Promise<[string] & { factoryV2: string }>;

    getLegacyFactoryV2(overrides?: CallOverrides): Promise<[string] & { legacyFactoryV2: string }>;

    getLegacyRouterV2(overrides?: CallOverrides): Promise<[string] & { legacyRouterV2: string }>;

    getRouterV2(overrides?: CallOverrides): Promise<[string] & { routerV2: string }>;
  };

  findBestPathFromAmountIn(
    route: PromiseOrValue<string>[],
    amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<LBQuoter.QuoteStructOutput>;

  findBestPathFromAmountOut(
    route: PromiseOrValue<string>[],
    amountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<LBQuoter.QuoteStructOutput>;

  getFactoryV1(overrides?: CallOverrides): Promise<string>;

  getFactoryV2(overrides?: CallOverrides): Promise<string>;

  getLegacyFactoryV2(overrides?: CallOverrides): Promise<string>;

  getLegacyRouterV2(overrides?: CallOverrides): Promise<string>;

  getRouterV2(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    findBestPathFromAmountIn(
      route: PromiseOrValue<string>[],
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<LBQuoter.QuoteStructOutput>;

    findBestPathFromAmountOut(
      route: PromiseOrValue<string>[],
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<LBQuoter.QuoteStructOutput>;

    getFactoryV1(overrides?: CallOverrides): Promise<string>;

    getFactoryV2(overrides?: CallOverrides): Promise<string>;

    getLegacyFactoryV2(overrides?: CallOverrides): Promise<string>;

    getLegacyRouterV2(overrides?: CallOverrides): Promise<string>;

    getRouterV2(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    findBestPathFromAmountIn(
      route: PromiseOrValue<string>[],
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    findBestPathFromAmountOut(
      route: PromiseOrValue<string>[],
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFactoryV1(overrides?: CallOverrides): Promise<BigNumber>;

    getFactoryV2(overrides?: CallOverrides): Promise<BigNumber>;

    getLegacyFactoryV2(overrides?: CallOverrides): Promise<BigNumber>;

    getLegacyRouterV2(overrides?: CallOverrides): Promise<BigNumber>;

    getRouterV2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    findBestPathFromAmountIn(
      route: PromiseOrValue<string>[],
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    findBestPathFromAmountOut(
      route: PromiseOrValue<string>[],
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFactoryV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFactoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLegacyFactoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLegacyRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
