/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface TetuYieldVaultInterface extends utils.Interface {
  functions: {
    'DEPOSIT_FEE_DENOMINATOR()': FunctionFragment;
    'LOCK_PENALTY_DENOMINATOR()': FunctionFragment;
    'TO_INVEST_DENOMINATOR()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'active()': FunctionFragment;
    'addRewardToken(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'alwaysInvest()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'availableToInvestOut()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'changeActivityStatus(bool)': FunctionFragment;
    'changeAlwaysInvest(bool)': FunctionFragment;
    'changeDoHardWorkOnInvest(bool)': FunctionFragment;
    'changePpfsDecreaseAllowed(bool)': FunctionFragment;
    'changeProtectionMode(bool)': FunctionFragment;
    'controller()': FunctionFragment;
    'created()': FunctionFragment;
    'createdBlock()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositAndInvest(uint256)': FunctionFragment;
    'depositFeeNumerator()': FunctionFragment;
    'depositFor(uint256,address)': FunctionFragment;
    'disableLock()': FunctionFragment;
    'doHardWork()': FunctionFragment;
    'doHardWorkOnInvest()': FunctionFragment;
    'duration()': FunctionFragment;
    'earned(address,address)': FunctionFragment;
    'earnedWithBoost(address,address)': FunctionFragment;
    'exit()': FunctionFragment;
    'getAllRewards()': FunctionFragment;
    'getAllRewardsFor(address)': FunctionFragment;
    'getPricePerFullShare()': FunctionFragment;
    'getReward(address)': FunctionFragment;
    'getRewardTokenIndex(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initializeControllable(address)': FunctionFragment;
    'initializeSmartVault(string,string,address,address,uint256,bool,address,uint256)': FunctionFragment;
    'initializeVaultStorage(address,uint256,bool)': FunctionFragment;
    'isController(address)': FunctionFragment;
    'isGovernance(address)': FunctionFragment;
    'lastTimeRewardApplicable(address)': FunctionFragment;
    'lastUpdateTimeForToken(address)': FunctionFragment;
    'lockAllowed()': FunctionFragment;
    'lockPenalty()': FunctionFragment;
    'lockPeriod()': FunctionFragment;
    'name()': FunctionFragment;
    'notifyRewardWithoutPeriodChange(address,uint256)': FunctionFragment;
    'notifyTargetRewardAmount(address,uint256)': FunctionFragment;
    'overrideName(string)': FunctionFragment;
    'overrideSymbol(string)': FunctionFragment;
    'periodFinishForToken(address)': FunctionFragment;
    'ppfsDecreaseAllowed()': FunctionFragment;
    'protectionMode()': FunctionFragment;
    'rebalance()': FunctionFragment;
    'removeRewardToken(address)': FunctionFragment;
    'rewardPerToken(address)': FunctionFragment;
    'rewardPerTokenStoredForToken(address)': FunctionFragment;
    'rewardRateForToken(address)': FunctionFragment;
    'rewardTokens()': FunctionFragment;
    'rewardTokensLength()': FunctionFragment;
    'rewardsForToken(address,address)': FunctionFragment;
    'setLockPenalty(uint256)': FunctionFragment;
    'setLockPeriod(uint256)': FunctionFragment;
    'setStrategy(address)': FunctionFragment;
    'setToInvest(uint256)': FunctionFragment;
    'stop()': FunctionFragment;
    'strategy()': FunctionFragment;
    'symbol()': FunctionFragment;
    'toInvest()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'underlying()': FunctionFragment;
    'underlyingBalanceInVault()': FunctionFragment;
    'underlyingBalanceWithInvestment()': FunctionFragment;
    'underlyingBalanceWithInvestmentForHolder(address)': FunctionFragment;
    'underlyingUnit()': FunctionFragment;
    'userBoostTs(address)': FunctionFragment;
    'userLastDepositTs(address)': FunctionFragment;
    'userLastWithdrawTs(address)': FunctionFragment;
    'userLockTs(address)': FunctionFragment;
    'userRewardPerTokenPaidForToken(address,address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawAllToVault()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEPOSIT_FEE_DENOMINATOR'
      | 'LOCK_PENALTY_DENOMINATOR'
      | 'TO_INVEST_DENOMINATOR'
      | 'VERSION'
      | 'active'
      | 'addRewardToken'
      | 'allowance'
      | 'alwaysInvest'
      | 'approve'
      | 'availableToInvestOut'
      | 'balanceOf'
      | 'changeActivityStatus'
      | 'changeAlwaysInvest'
      | 'changeDoHardWorkOnInvest'
      | 'changePpfsDecreaseAllowed'
      | 'changeProtectionMode'
      | 'controller'
      | 'created'
      | 'createdBlock'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositAndInvest'
      | 'depositFeeNumerator'
      | 'depositFor'
      | 'disableLock'
      | 'doHardWork'
      | 'doHardWorkOnInvest'
      | 'duration'
      | 'earned'
      | 'earnedWithBoost'
      | 'exit'
      | 'getAllRewards'
      | 'getAllRewardsFor'
      | 'getPricePerFullShare'
      | 'getReward'
      | 'getRewardTokenIndex'
      | 'increaseAllowance'
      | 'initializeControllable'
      | 'initializeSmartVault'
      | 'initializeVaultStorage'
      | 'isController'
      | 'isGovernance'
      | 'lastTimeRewardApplicable'
      | 'lastUpdateTimeForToken'
      | 'lockAllowed'
      | 'lockPenalty'
      | 'lockPeriod'
      | 'name'
      | 'notifyRewardWithoutPeriodChange'
      | 'notifyTargetRewardAmount'
      | 'overrideName'
      | 'overrideSymbol'
      | 'periodFinishForToken'
      | 'ppfsDecreaseAllowed'
      | 'protectionMode'
      | 'rebalance'
      | 'removeRewardToken'
      | 'rewardPerToken'
      | 'rewardPerTokenStoredForToken'
      | 'rewardRateForToken'
      | 'rewardTokens'
      | 'rewardTokensLength'
      | 'rewardsForToken'
      | 'setLockPenalty'
      | 'setLockPeriod'
      | 'setStrategy'
      | 'setToInvest'
      | 'stop'
      | 'strategy'
      | 'symbol'
      | 'toInvest'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'underlying'
      | 'underlyingBalanceInVault'
      | 'underlyingBalanceWithInvestment'
      | 'underlyingBalanceWithInvestmentForHolder'
      | 'underlyingUnit'
      | 'userBoostTs'
      | 'userLastDepositTs'
      | 'userLastWithdrawTs'
      | 'userLockTs'
      | 'userRewardPerTokenPaidForToken'
      | 'withdraw'
      | 'withdrawAllToVault',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEPOSIT_FEE_DENOMINATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LOCK_PENALTY_DENOMINATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TO_INVEST_DENOMINATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'active', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addRewardToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'alwaysInvest', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'availableToInvestOut', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeActivityStatus', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'changeAlwaysInvest', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'changeDoHardWorkOnInvest', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'changePpfsDecreaseAllowed', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'changeProtectionMode', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'created', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createdBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositAndInvest', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositFeeNumerator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'disableLock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'doHardWork', values?: undefined): string;
  encodeFunctionData(functionFragment: 'doHardWorkOnInvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'duration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earned', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'earnedWithBoost',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllRewardsFor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPricePerFullShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRewardTokenIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initializeControllable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initializeSmartVault',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'initializeVaultStorage',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'isController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastTimeRewardApplicable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastUpdateTimeForToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lockAllowed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockPenalty', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'notifyRewardWithoutPeriodChange',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'notifyTargetRewardAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'overrideName', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'overrideSymbol', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'periodFinishForToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'ppfsDecreaseAllowed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protectionMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeRewardToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardPerTokenStoredForToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardRateForToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokensLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rewardsForToken',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setLockPenalty', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setLockPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setStrategy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setToInvest', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stop', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toInvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingBalanceInVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingBalanceWithInvestment', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'underlyingBalanceWithInvestmentForHolder',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'underlyingUnit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userBoostTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userLastDepositTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userLastWithdrawTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userLockTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userRewardPerTokenPaidForToken',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawAllToVault', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEPOSIT_FEE_DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LOCK_PENALTY_DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TO_INVEST_DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'active', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'alwaysInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableToInvestOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeActivityStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeAlwaysInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeDoHardWorkOnInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changePpfsDecreaseAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeProtectionMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'created', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createdBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFeeNumerator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'doHardWork', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'doHardWorkOnInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'duration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earnedWithBoost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllRewardsFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPricePerFullShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardTokenIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeControllable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeSmartVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeVaultStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUpdateTimeForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockPenalty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardWithoutPeriodChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyTargetRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'overrideName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'overrideSymbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodFinishForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ppfsDecreaseAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protectionMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerTokenStoredForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRateForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokensLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockPenalty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setToInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toInvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalanceInVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalanceWithInvestment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalanceWithInvestmentForHolder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingUnit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userBoostTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userLastDepositTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userLastWithdrawTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userLockTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaidForToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllToVault', data: BytesLike): Result;

  events: {
    'AddedRewardToken(address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ContractInitialized(address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Invest(uint256)': EventFragment;
    'RemovedRewardToken(address)': EventFragment;
    'RewardAdded(address,uint256)': EventFragment;
    'RewardDenied(address,address,uint256)': EventFragment;
    'RewardMovedToController(address,uint256)': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'RewardRecirculated(address,uint256)': EventFragment;
    'RewardSentToController(address,uint256)': EventFragment;
    'Staked(address,uint256)': EventFragment;
    'StrategyAnnounced(address,uint256)': EventFragment;
    'StrategyChanged(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UpdatedAddressSlot(string,address,address)': EventFragment;
    'UpdatedBoolSlot(string,bool,bool)': EventFragment;
    'UpdatedUint256Slot(string,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddedRewardToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ContractInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Invest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemovedRewardToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardDenied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardMovedToController'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRecirculated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardSentToController'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyAnnounced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedAddressSlot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedBoolSlot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedUint256Slot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface AddedRewardTokenEventObject {
  token: string;
}
export type AddedRewardTokenEvent = TypedEvent<[string], AddedRewardTokenEventObject>;

export type AddedRewardTokenEventFilter = TypedEventFilter<AddedRewardTokenEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ContractInitializedEventObject {
  controller: string;
  ts: BigNumber;
  block: BigNumber;
}
export type ContractInitializedEvent = TypedEvent<[string, BigNumber, BigNumber], ContractInitializedEventObject>;

export type ContractInitializedEventFilter = TypedEventFilter<ContractInitializedEvent>;

export interface DepositEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InvestEventObject {
  amount: BigNumber;
}
export type InvestEvent = TypedEvent<[BigNumber], InvestEventObject>;

export type InvestEventFilter = TypedEventFilter<InvestEvent>;

export interface RemovedRewardTokenEventObject {
  token: string;
}
export type RemovedRewardTokenEvent = TypedEvent<[string], RemovedRewardTokenEventObject>;

export type RemovedRewardTokenEventFilter = TypedEventFilter<RemovedRewardTokenEvent>;

export interface RewardAddedEventObject {
  rewardToken: string;
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[string, BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardDeniedEventObject {
  user: string;
  rewardToken: string;
  reward: BigNumber;
}
export type RewardDeniedEvent = TypedEvent<[string, string, BigNumber], RewardDeniedEventObject>;

export type RewardDeniedEventFilter = TypedEventFilter<RewardDeniedEvent>;

export interface RewardMovedToControllerEventObject {
  rewardToken: string;
  amount: BigNumber;
}
export type RewardMovedToControllerEvent = TypedEvent<[string, BigNumber], RewardMovedToControllerEventObject>;

export type RewardMovedToControllerEventFilter = TypedEventFilter<RewardMovedToControllerEvent>;

export interface RewardPaidEventObject {
  user: string;
  rewardToken: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardRecirculatedEventObject {
  token: string;
  amount: BigNumber;
}
export type RewardRecirculatedEvent = TypedEvent<[string, BigNumber], RewardRecirculatedEventObject>;

export type RewardRecirculatedEventFilter = TypedEventFilter<RewardRecirculatedEvent>;

export interface RewardSentToControllerEventObject {
  token: string;
  amount: BigNumber;
}
export type RewardSentToControllerEvent = TypedEvent<[string, BigNumber], RewardSentToControllerEventObject>;

export type RewardSentToControllerEventFilter = TypedEventFilter<RewardSentToControllerEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StrategyAnnouncedEventObject {
  newStrategy: string;
  time: BigNumber;
}
export type StrategyAnnouncedEvent = TypedEvent<[string, BigNumber], StrategyAnnouncedEventObject>;

export type StrategyAnnouncedEventFilter = TypedEventFilter<StrategyAnnouncedEvent>;

export interface StrategyChangedEventObject {
  newStrategy: string;
  oldStrategy: string;
}
export type StrategyChangedEvent = TypedEvent<[string, string], StrategyChangedEventObject>;

export type StrategyChangedEventFilter = TypedEventFilter<StrategyChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdatedAddressSlotEventObject {
  name: string;
  oldValue: string;
  newValue: string;
}
export type UpdatedAddressSlotEvent = TypedEvent<[string, string, string], UpdatedAddressSlotEventObject>;

export type UpdatedAddressSlotEventFilter = TypedEventFilter<UpdatedAddressSlotEvent>;

export interface UpdatedBoolSlotEventObject {
  name: string;
  oldValue: boolean;
  newValue: boolean;
}
export type UpdatedBoolSlotEvent = TypedEvent<[string, boolean, boolean], UpdatedBoolSlotEventObject>;

export type UpdatedBoolSlotEventFilter = TypedEventFilter<UpdatedBoolSlotEvent>;

export interface UpdatedUint256SlotEventObject {
  name: string;
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdatedUint256SlotEvent = TypedEvent<[string, BigNumber, BigNumber], UpdatedUint256SlotEventObject>;

export type UpdatedUint256SlotEventFilter = TypedEventFilter<UpdatedUint256SlotEvent>;

export interface WithdrawEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface TetuYieldVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TetuYieldVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSIT_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOCK_PENALTY_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    TO_INVEST_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    addRewardToken(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    alwaysInvest(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    availableToInvestOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeActivityStatus(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeAlwaysInvest(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeDoHardWorkOnInvest(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changePpfsDecreaseAllowed(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeProtectionMode(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    created(overrides?: CallOverrides): Promise<[BigNumber] & { ts: BigNumber }>;

    createdBlock(overrides?: CallOverrides): Promise<[BigNumber] & { ts: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAndInvest(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFeeNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFor(
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    doHardWork(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    doHardWorkOnInvest(overrides?: CallOverrides): Promise<[boolean]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(
      rt: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    earnedWithBoost(
      rt: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAllRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAllRewardsFor(
      rewardsReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRewardTokenIndex(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeControllable(
      __controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeSmartVault(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      __underlying: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _lockAllowed: PromiseOrValue<boolean>,
      _rewardToken: PromiseOrValue<string>,
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeVaultStorage(
      _underlyingToken: PromiseOrValue<string>,
      _durationValue: PromiseOrValue<BigNumberish>,
      __lockAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lastTimeRewardApplicable(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTimeForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lockAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    lockPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardWithoutPeriodChange(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    notifyTargetRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    overrideName(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    overrideSymbol(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    periodFinishForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    ppfsDecreaseAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    protectionMode(overrides?: CallOverrides): Promise<[boolean]>;

    rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    removeRewardToken(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardPerToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStoredForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRateForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    rewardTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    setLockPenalty(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLockPeriod(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStrategy(
      newStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setToInvest(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toInvest(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingBalanceWithInvestment(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingBalanceWithInvestmentForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    underlyingUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    userBoostTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userLastDepositTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userLastWithdrawTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userLockTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userRewardPerTokenPaidForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    withdraw(
      numberOfShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAllToVault(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  DEPOSIT_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  LOCK_PENALTY_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  TO_INVEST_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  active(overrides?: CallOverrides): Promise<boolean>;

  addRewardToken(
    rt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  alwaysInvest(overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  changeActivityStatus(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeAlwaysInvest(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeDoHardWorkOnInvest(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changePpfsDecreaseAllowed(
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeProtectionMode(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  createdBlock(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAndInvest(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  depositFor(
    amount: PromiseOrValue<BigNumberish>,
    holder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  doHardWork(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  doHardWorkOnInvest(overrides?: CallOverrides): Promise<boolean>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  earned(rt: PromiseOrValue<string>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  earnedWithBoost(
    rt: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAllRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAllRewardsFor(
    rewardsReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(
    rt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getRewardTokenIndex(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeControllable(
    __controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeSmartVault(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    __underlying: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    _lockAllowed: PromiseOrValue<boolean>,
    _rewardToken: PromiseOrValue<string>,
    _depositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeVaultStorage(
    _underlyingToken: PromiseOrValue<string>,
    _durationValue: PromiseOrValue<BigNumberish>,
    __lockAllowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lastTimeRewardApplicable(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTimeForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lockAllowed(overrides?: CallOverrides): Promise<boolean>;

  lockPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  notifyRewardWithoutPeriodChange(
    _rewardToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  notifyTargetRewardAmount(
    _rewardToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  overrideName(
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  overrideSymbol(
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  periodFinishForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  ppfsDecreaseAllowed(overrides?: CallOverrides): Promise<boolean>;

  protectionMode(overrides?: CallOverrides): Promise<boolean>;

  rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  removeRewardToken(
    rt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardPerToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStoredForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  rewardRateForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(overrides?: CallOverrides): Promise<string[]>;

  rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsForToken(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  setLockPenalty(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLockPeriod(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStrategy(
    newStrategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setToInvest(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toInvest(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingBalanceWithInvestment(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingBalanceWithInvestmentForHolder(
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

  userBoostTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userLastDepositTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userLastWithdrawTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userLockTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userRewardPerTokenPaidForToken(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  withdraw(
    numberOfShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAllToVault(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    DEPOSIT_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK_PENALTY_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    TO_INVEST_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    active(overrides?: CallOverrides): Promise<boolean>;

    addRewardToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    alwaysInvest(overrides?: CallOverrides): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    changeActivityStatus(_active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    changeAlwaysInvest(_active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    changeDoHardWorkOnInvest(_active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    changePpfsDecreaseAllowed(_value: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    changeProtectionMode(_active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    createdBlock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositAndInvest(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    disableLock(overrides?: CallOverrides): Promise<void>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    doHardWorkOnInvest(overrides?: CallOverrides): Promise<boolean>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(rt: PromiseOrValue<string>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    earnedWithBoost(
      rt: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    getAllRewards(overrides?: CallOverrides): Promise<void>;

    getAllRewardsFor(rewardsReceiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getRewardTokenIndex(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initializeControllable(__controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    initializeSmartVault(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      __underlying: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _lockAllowed: PromiseOrValue<boolean>,
      _rewardToken: PromiseOrValue<string>,
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initializeVaultStorage(
      _underlyingToken: PromiseOrValue<string>,
      _durationValue: PromiseOrValue<BigNumberish>,
      __lockAllowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lastTimeRewardApplicable(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTimeForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockAllowed(overrides?: CallOverrides): Promise<boolean>;

    lockPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    notifyRewardWithoutPeriodChange(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    notifyTargetRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    overrideName(value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    overrideSymbol(value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    periodFinishForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    ppfsDecreaseAllowed(overrides?: CallOverrides): Promise<boolean>;

    protectionMode(overrides?: CallOverrides): Promise<boolean>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    removeRewardToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rewardPerToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardRateForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<string[]>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setLockPenalty(_value: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLockPeriod(_value: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setStrategy(newStrategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setToInvest(_value: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toInvest(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

    userBoostTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userLastDepositTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userLastWithdrawTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userLockTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaidForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(numberOfShares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawAllToVault(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddedRewardToken(address)'(token?: PromiseOrValue<string> | null): AddedRewardTokenEventFilter;
    AddedRewardToken(token?: PromiseOrValue<string> | null): AddedRewardTokenEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'ContractInitialized(address,uint256,uint256)'(
      controller?: null,
      ts?: null,
      block?: null,
    ): ContractInitializedEventFilter;
    ContractInitialized(controller?: null, ts?: null, block?: null): ContractInitializedEventFilter;

    'Deposit(address,uint256)'(beneficiary?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(beneficiary?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'Invest(uint256)'(amount?: null): InvestEventFilter;
    Invest(amount?: null): InvestEventFilter;

    'RemovedRewardToken(address)'(token?: PromiseOrValue<string> | null): RemovedRewardTokenEventFilter;
    RemovedRewardToken(token?: PromiseOrValue<string> | null): RemovedRewardTokenEventFilter;

    'RewardAdded(address,uint256)'(rewardToken?: null, reward?: null): RewardAddedEventFilter;
    RewardAdded(rewardToken?: null, reward?: null): RewardAddedEventFilter;

    'RewardDenied(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      rewardToken?: null,
      reward?: null,
    ): RewardDeniedEventFilter;
    RewardDenied(user?: PromiseOrValue<string> | null, rewardToken?: null, reward?: null): RewardDeniedEventFilter;

    'RewardMovedToController(address,uint256)'(rewardToken?: null, amount?: null): RewardMovedToControllerEventFilter;
    RewardMovedToController(rewardToken?: null, amount?: null): RewardMovedToControllerEventFilter;

    'RewardPaid(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      rewardToken?: null,
      reward?: null,
    ): RewardPaidEventFilter;
    RewardPaid(user?: PromiseOrValue<string> | null, rewardToken?: null, reward?: null): RewardPaidEventFilter;

    'RewardRecirculated(address,uint256)'(
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): RewardRecirculatedEventFilter;
    RewardRecirculated(token?: PromiseOrValue<string> | null, amount?: null): RewardRecirculatedEventFilter;

    'RewardSentToController(address,uint256)'(
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): RewardSentToControllerEventFilter;
    RewardSentToController(token?: PromiseOrValue<string> | null, amount?: null): RewardSentToControllerEventFilter;

    'Staked(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): StakedEventFilter;
    Staked(user?: PromiseOrValue<string> | null, amount?: null): StakedEventFilter;

    'StrategyAnnounced(address,uint256)'(newStrategy?: null, time?: null): StrategyAnnouncedEventFilter;
    StrategyAnnounced(newStrategy?: null, time?: null): StrategyAnnouncedEventFilter;

    'StrategyChanged(address,address)'(newStrategy?: null, oldStrategy?: null): StrategyChangedEventFilter;
    StrategyChanged(newStrategy?: null, oldStrategy?: null): StrategyChangedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UpdatedAddressSlot(string,address,address)'(
      name?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): UpdatedAddressSlotEventFilter;
    UpdatedAddressSlot(
      name?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): UpdatedAddressSlotEventFilter;

    'UpdatedBoolSlot(string,bool,bool)'(
      name?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): UpdatedBoolSlotEventFilter;
    UpdatedBoolSlot(name?: PromiseOrValue<string> | null, oldValue?: null, newValue?: null): UpdatedBoolSlotEventFilter;

    'UpdatedUint256Slot(string,uint256,uint256)'(
      name?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): UpdatedUint256SlotEventFilter;
    UpdatedUint256Slot(
      name?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): UpdatedUint256SlotEventFilter;

    'Withdraw(address,uint256)'(beneficiary?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(beneficiary?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;

    'Withdrawn(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): WithdrawnEventFilter;
    Withdrawn(user?: PromiseOrValue<string> | null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    DEPOSIT_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK_PENALTY_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    TO_INVEST_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    alwaysInvest(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    changeActivityStatus(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeAlwaysInvest(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeDoHardWorkOnInvest(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changePpfsDecreaseAllowed(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeProtectionMode(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    createdBlock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAndInvest(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    doHardWork(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    doHardWorkOnInvest(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(rt: PromiseOrValue<string>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    earnedWithBoost(
      rt: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAllRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAllRewardsFor(
      rewardsReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getRewardTokenIndex(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeControllable(
      __controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeSmartVault(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      __underlying: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _lockAllowed: PromiseOrValue<boolean>,
      _rewardToken: PromiseOrValue<string>,
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeVaultStorage(
      _underlyingToken: PromiseOrValue<string>,
      _durationValue: PromiseOrValue<BigNumberish>,
      __lockAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTimeForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    lockPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardWithoutPeriodChange(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    notifyTargetRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    overrideName(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    overrideSymbol(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    periodFinishForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    ppfsDecreaseAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    protectionMode(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    removeRewardToken(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardPerToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardRateForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setLockPenalty(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLockPeriod(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStrategy(
      newStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setToInvest(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stop(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toInvest(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

    userBoostTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userLastDepositTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userLastWithdrawTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userLockTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaidForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAllToVault(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK_PENALTY_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TO_INVEST_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardToken(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    alwaysInvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    availableToInvestOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeActivityStatus(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeAlwaysInvest(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeDoHardWorkOnInvest(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changePpfsDecreaseAllowed(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeProtectionMode(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createdBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAndInvest(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFeeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableLock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    doHardWork(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    doHardWorkOnInvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      rt: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    earnedWithBoost(
      rt: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAllRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAllRewardsFor(
      rewardsReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getRewardTokenIndex(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      __controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeSmartVault(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      __underlying: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _lockAllowed: PromiseOrValue<boolean>,
      _rewardToken: PromiseOrValue<string>,
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeVaultStorage(
      _underlyingToken: PromiseOrValue<string>,
      _durationValue: PromiseOrValue<BigNumberish>,
      __lockAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateTimeForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPenalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardWithoutPeriodChange(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    notifyTargetRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    overrideName(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    overrideSymbol(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    periodFinishForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ppfsDecreaseAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protectionMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    removeRewardToken(
      rt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardPerToken(rt: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStoredForToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardRateForToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setLockPenalty(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLockPeriod(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStrategy(
      newStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setToInvest(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toInvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestmentForHolder(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    underlyingUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBoostTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLastDepositTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLastWithdrawTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLockTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewardPerTokenPaidForToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      numberOfShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAllToVault(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
