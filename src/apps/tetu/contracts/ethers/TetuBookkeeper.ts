/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IBookkeeper {
  export type HardWorkStruct = {
    strategy: PromiseOrValue<string>;
    block: PromiseOrValue<BigNumberish>;
    time: PromiseOrValue<BigNumberish>;
    targetTokenAmount: PromiseOrValue<BigNumberish>;
  };

  export type HardWorkStructOutput = [string, BigNumber, BigNumber, BigNumber] & {
    strategy: string;
    block: BigNumber;
    time: BigNumber;
    targetTokenAmount: BigNumber;
  };

  export type PpfsChangeStruct = {
    vault: PromiseOrValue<string>;
    block: PromiseOrValue<BigNumberish>;
    time: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    oldBlock: PromiseOrValue<BigNumberish>;
    oldTime: PromiseOrValue<BigNumberish>;
    oldValue: PromiseOrValue<BigNumberish>;
  };

  export type PpfsChangeStructOutput = [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    vault: string;
    block: BigNumber;
    time: BigNumber;
    value: BigNumber;
    oldBlock: BigNumber;
    oldTime: BigNumber;
    oldValue: BigNumber;
  };
}

export interface TetuBookkeeperInterface extends utils.Interface {
  functions: {
    'VERSION()': FunctionFragment;
    '_strategies(uint256)': FunctionFragment;
    '_vaults(uint256)': FunctionFragment;
    'addStrategy(address)': FunctionFragment;
    'addVault(address)': FunctionFragment;
    'controller()': FunctionFragment;
    'created()': FunctionFragment;
    'createdBlock()': FunctionFragment;
    'fundKeeperEarned(address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'initializeControllable(address)': FunctionFragment;
    'isController(address)': FunctionFragment;
    'isGovernance(address)': FunctionFragment;
    'lastHardWork(address)': FunctionFragment;
    'lastPpfsChange(address)': FunctionFragment;
    'registerFundKeeperEarned(address,uint256)': FunctionFragment;
    'registerPpfsChange(address,uint256)': FunctionFragment;
    'registerRewardDistribution(address,address,uint256)': FunctionFragment;
    'registerStrategyEarned(uint256)': FunctionFragment;
    'registerUserAction(address,uint256,bool)': FunctionFragment;
    'registerUserEarned(address,address,address,uint256)': FunctionFragment;
    'registerVaultTransfer(address,address,uint256)': FunctionFragment;
    'removeFromStrategies(uint256)': FunctionFragment;
    'removeFromStrategiesBatch(uint256[])': FunctionFragment;
    'removeFromVaults(uint256)': FunctionFragment;
    'removeFromVaultsBatch(uint256[])': FunctionFragment;
    'strategies()': FunctionFragment;
    'strategiesLength()': FunctionFragment;
    'strategyEarnedSnapshots(address,uint256)': FunctionFragment;
    'strategyEarnedSnapshotsLength(address)': FunctionFragment;
    'strategyEarnedSnapshotsTime(address,uint256)': FunctionFragment;
    'targetTokenEarned(address)': FunctionFragment;
    'userEarned(address,address,address)': FunctionFragment;
    'vaultRewards(address,address,uint256)': FunctionFragment;
    'vaultRewardsLength(address,address)': FunctionFragment;
    'vaultUsersBalances(address,address)': FunctionFragment;
    'vaultUsersQuantity(address)': FunctionFragment;
    'vaults()': FunctionFragment;
    'vaultsLength()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'VERSION'
      | '_strategies'
      | '_vaults'
      | 'addStrategy'
      | 'addVault'
      | 'controller'
      | 'created'
      | 'createdBlock'
      | 'fundKeeperEarned'
      | 'initialize'
      | 'initializeControllable'
      | 'isController'
      | 'isGovernance'
      | 'lastHardWork'
      | 'lastPpfsChange'
      | 'registerFundKeeperEarned'
      | 'registerPpfsChange'
      | 'registerRewardDistribution'
      | 'registerStrategyEarned'
      | 'registerUserAction'
      | 'registerUserEarned'
      | 'registerVaultTransfer'
      | 'removeFromStrategies'
      | 'removeFromStrategiesBatch'
      | 'removeFromVaults'
      | 'removeFromVaultsBatch'
      | 'strategies'
      | 'strategiesLength'
      | 'strategyEarnedSnapshots'
      | 'strategyEarnedSnapshotsLength'
      | 'strategyEarnedSnapshotsTime'
      | 'targetTokenEarned'
      | 'userEarned'
      | 'vaultRewards'
      | 'vaultRewardsLength'
      | 'vaultUsersBalances'
      | 'vaultUsersQuantity'
      | 'vaults'
      | 'vaultsLength',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: '_strategies', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: '_vaults', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'addStrategy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'created', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createdBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fundKeeperEarned', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'initializeControllable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastHardWork', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastPpfsChange', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'registerFundKeeperEarned',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPpfsChange',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerRewardDistribution',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'registerStrategyEarned', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'registerUserAction',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerUserEarned',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerVaultTransfer',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'removeFromStrategies', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'removeFromStrategiesBatch', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'removeFromVaults', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'removeFromVaultsBatch', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'strategies', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategiesLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'strategyEarnedSnapshots',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'strategyEarnedSnapshotsLength', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'strategyEarnedSnapshotsTime',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'targetTokenEarned', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userEarned',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultRewardsLength',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultUsersBalances',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'vaultUsersQuantity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'vaults', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultsLength', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_vaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'created', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createdBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundKeeperEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeControllable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastHardWork', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPpfsChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerFundKeeperEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerPpfsChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerRewardDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerStrategyEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerUserAction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerUserEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerVaultTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromStrategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromStrategiesBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromVaultsBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategiesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyEarnedSnapshots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyEarnedSnapshotsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyEarnedSnapshotsTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'targetTokenEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userEarned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultRewardsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultUsersBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultUsersQuantity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultsLength', data: BytesLike): Result;

  events: {
    'ContractInitialized(address,uint256,uint256)': EventFragment;
    'RegisterFundKeeperEarned(address,uint256)': EventFragment;
    'RegisterPpfsChange(address,uint256,uint256)': EventFragment;
    'RegisterStrategy(address)': EventFragment;
    'RegisterStrategyEarned(address,uint256)': EventFragment;
    'RegisterUserAction(address,uint256,bool)': EventFragment;
    'RegisterUserEarned(address,address,address,uint256)': EventFragment;
    'RegisterVault(address)': EventFragment;
    'RemoveStrategy(address)': EventFragment;
    'RemoveVault(address)': EventFragment;
    'RewardDistribution(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ContractInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterFundKeeperEarned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterPpfsChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterStrategy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterStrategyEarned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterUserAction'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterUserEarned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterVault'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveStrategy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveVault'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardDistribution'): EventFragment;
}

export interface ContractInitializedEventObject {
  controller: string;
  ts: BigNumber;
  block: BigNumber;
}
export type ContractInitializedEvent = TypedEvent<[string, BigNumber, BigNumber], ContractInitializedEventObject>;

export type ContractInitializedEventFilter = TypedEventFilter<ContractInitializedEvent>;

export interface RegisterFundKeeperEarnedEventObject {
  token: string;
  amount: BigNumber;
}
export type RegisterFundKeeperEarnedEvent = TypedEvent<[string, BigNumber], RegisterFundKeeperEarnedEventObject>;

export type RegisterFundKeeperEarnedEventFilter = TypedEventFilter<RegisterFundKeeperEarnedEvent>;

export interface RegisterPpfsChangeEventObject {
  vault: string;
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type RegisterPpfsChangeEvent = TypedEvent<[string, BigNumber, BigNumber], RegisterPpfsChangeEventObject>;

export type RegisterPpfsChangeEventFilter = TypedEventFilter<RegisterPpfsChangeEvent>;

export interface RegisterStrategyEventObject {
  value: string;
}
export type RegisterStrategyEvent = TypedEvent<[string], RegisterStrategyEventObject>;

export type RegisterStrategyEventFilter = TypedEventFilter<RegisterStrategyEvent>;

export interface RegisterStrategyEarnedEventObject {
  strategy: string;
  amount: BigNumber;
}
export type RegisterStrategyEarnedEvent = TypedEvent<[string, BigNumber], RegisterStrategyEarnedEventObject>;

export type RegisterStrategyEarnedEventFilter = TypedEventFilter<RegisterStrategyEarnedEvent>;

export interface RegisterUserActionEventObject {
  user: string;
  amount: BigNumber;
  deposit: boolean;
}
export type RegisterUserActionEvent = TypedEvent<[string, BigNumber, boolean], RegisterUserActionEventObject>;

export type RegisterUserActionEventFilter = TypedEventFilter<RegisterUserActionEvent>;

export interface RegisterUserEarnedEventObject {
  user: string;
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RegisterUserEarnedEvent = TypedEvent<[string, string, string, BigNumber], RegisterUserEarnedEventObject>;

export type RegisterUserEarnedEventFilter = TypedEventFilter<RegisterUserEarnedEvent>;

export interface RegisterVaultEventObject {
  value: string;
}
export type RegisterVaultEvent = TypedEvent<[string], RegisterVaultEventObject>;

export type RegisterVaultEventFilter = TypedEventFilter<RegisterVaultEvent>;

export interface RemoveStrategyEventObject {
  value: string;
}
export type RemoveStrategyEvent = TypedEvent<[string], RemoveStrategyEventObject>;

export type RemoveStrategyEventFilter = TypedEventFilter<RemoveStrategyEvent>;

export interface RemoveVaultEventObject {
  value: string;
}
export type RemoveVaultEvent = TypedEvent<[string], RemoveVaultEventObject>;

export type RemoveVaultEventFilter = TypedEventFilter<RemoveVaultEvent>;

export interface RewardDistributionEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
  time: BigNumber;
}
export type RewardDistributionEvent = TypedEvent<[string, string, BigNumber, BigNumber], RewardDistributionEventObject>;

export type RewardDistributionEventFilter = TypedEventFilter<RewardDistributionEvent>;

export interface TetuBookkeeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TetuBookkeeperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    _strategies(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    _vaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    created(overrides?: CallOverrides): Promise<[BigNumber] & { ts: BigNumber }>;

    createdBlock(overrides?: CallOverrides): Promise<[BigNumber] & { ts: BigNumber }>;

    fundKeeperEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeControllable(
      __controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lastHardWork(
      strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IBookkeeper.HardWorkStructOutput]>;

    lastPpfsChange(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IBookkeeper.PpfsChangeStructOutput]>;

    registerFundKeeperEarned(
      _token: PromiseOrValue<string>,
      _fundTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerPpfsChange(
      vault: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerRewardDistribution(
      vault: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerStrategyEarned(
      _targetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerUserAction(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerUserEarned(
      _user: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _rt: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerVaultTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeFromStrategies(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeFromStrategiesBatch(
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeFromVaults(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeFromVaultsBatch(
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strategies(overrides?: CallOverrides): Promise<[string[]]>;

    strategiesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    strategyEarnedSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    strategyEarnedSnapshotsLength(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strategyEarnedSnapshotsTime(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    targetTokenEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userEarned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    vaultRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    vaultRewardsLength(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    vaultUsersBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    vaultUsersQuantity(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaults(overrides?: CallOverrides): Promise<[string[]]>;

    vaultsLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  _strategies(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  _vaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  addStrategy(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  createdBlock(overrides?: CallOverrides): Promise<BigNumber>;

  fundKeeperEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeControllable(
    __controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lastHardWork(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IBookkeeper.HardWorkStructOutput>;

  lastPpfsChange(vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IBookkeeper.PpfsChangeStructOutput>;

  registerFundKeeperEarned(
    _token: PromiseOrValue<string>,
    _fundTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerPpfsChange(
    vault: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerRewardDistribution(
    vault: PromiseOrValue<string>,
    rewardToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerStrategyEarned(
    _targetTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerUserAction(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _deposit: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerUserEarned(
    _user: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    _rt: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerVaultTransfer(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeFromStrategies(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeFromStrategiesBatch(
    indexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeFromVaults(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeFromVaultsBatch(
    indexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

  strategyEarnedSnapshots(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  strategyEarnedSnapshotsLength(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  strategyEarnedSnapshotsTime(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  targetTokenEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userEarned(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  vaultRewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  vaultRewardsLength(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  vaultUsersBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  vaultUsersQuantity(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  vaults(overrides?: CallOverrides): Promise<string[]>;

  vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    _strategies(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    _vaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    addStrategy(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addVault(_vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    createdBlock(overrides?: CallOverrides): Promise<BigNumber>;

    fundKeeperEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    initializeControllable(__controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lastHardWork(
      strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IBookkeeper.HardWorkStructOutput>;

    lastPpfsChange(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IBookkeeper.PpfsChangeStructOutput>;

    registerFundKeeperEarned(
      _token: PromiseOrValue<string>,
      _fundTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerPpfsChange(
      vault: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerRewardDistribution(
      vault: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerStrategyEarned(_targetTokenAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    registerUserAction(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerUserEarned(
      _user: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _rt: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerVaultTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeFromStrategies(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    removeFromStrategiesBatch(indexes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    removeFromVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    removeFromVaultsBatch(indexes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    strategyEarnedSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    strategyEarnedSnapshotsLength(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strategyEarnedSnapshotsTime(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    targetTokenEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userEarned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultRewardsLength(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultUsersBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultUsersQuantity(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<string[]>;

    vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'ContractInitialized(address,uint256,uint256)'(
      controller?: null,
      ts?: null,
      block?: null,
    ): ContractInitializedEventFilter;
    ContractInitialized(controller?: null, ts?: null, block?: null): ContractInitializedEventFilter;

    'RegisterFundKeeperEarned(address,uint256)'(
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): RegisterFundKeeperEarnedEventFilter;
    RegisterFundKeeperEarned(token?: PromiseOrValue<string> | null, amount?: null): RegisterFundKeeperEarnedEventFilter;

    'RegisterPpfsChange(address,uint256,uint256)'(
      vault?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): RegisterPpfsChangeEventFilter;
    RegisterPpfsChange(
      vault?: PromiseOrValue<string> | null,
      oldValue?: null,
      newValue?: null,
    ): RegisterPpfsChangeEventFilter;

    'RegisterStrategy(address)'(value?: null): RegisterStrategyEventFilter;
    RegisterStrategy(value?: null): RegisterStrategyEventFilter;

    'RegisterStrategyEarned(address,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      amount?: null,
    ): RegisterStrategyEarnedEventFilter;
    RegisterStrategyEarned(strategy?: PromiseOrValue<string> | null, amount?: null): RegisterStrategyEarnedEventFilter;

    'RegisterUserAction(address,uint256,bool)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      deposit?: null,
    ): RegisterUserActionEventFilter;
    RegisterUserAction(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      deposit?: null,
    ): RegisterUserActionEventFilter;

    'RegisterUserEarned(address,address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      vault?: null,
      token?: null,
      amount?: null,
    ): RegisterUserEarnedEventFilter;
    RegisterUserEarned(
      user?: PromiseOrValue<string> | null,
      vault?: null,
      token?: null,
      amount?: null,
    ): RegisterUserEarnedEventFilter;

    'RegisterVault(address)'(value?: null): RegisterVaultEventFilter;
    RegisterVault(value?: null): RegisterVaultEventFilter;

    'RemoveStrategy(address)'(value?: null): RemoveStrategyEventFilter;
    RemoveStrategy(value?: null): RemoveStrategyEventFilter;

    'RemoveVault(address)'(value?: null): RemoveVaultEventFilter;
    RemoveVault(value?: null): RemoveVaultEventFilter;

    'RewardDistribution(address,address,uint256,uint256)'(
      vault?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      time?: null,
    ): RewardDistributionEventFilter;
    RewardDistribution(
      vault?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      time?: null,
    ): RewardDistributionEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _strategies(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    _vaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    createdBlock(overrides?: CallOverrides): Promise<BigNumber>;

    fundKeeperEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeControllable(
      __controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastHardWork(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastPpfsChange(vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    registerFundKeeperEarned(
      _token: PromiseOrValue<string>,
      _fundTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerPpfsChange(
      vault: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerRewardDistribution(
      vault: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerStrategyEarned(
      _targetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerUserAction(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerUserEarned(
      _user: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _rt: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerVaultTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeFromStrategies(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeFromStrategiesBatch(
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeFromVaults(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeFromVaultsBatch(
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    strategyEarnedSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    strategyEarnedSnapshotsLength(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strategyEarnedSnapshotsTime(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    targetTokenEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userEarned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultRewardsLength(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultUsersBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultUsersQuantity(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<BigNumber>;

    vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _strategies(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _vaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createdBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundKeeperEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      __controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isController(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernance(_value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHardWork(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPpfsChange(vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerFundKeeperEarned(
      _token: PromiseOrValue<string>,
      _fundTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerPpfsChange(
      vault: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerRewardDistribution(
      vault: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerStrategyEarned(
      _targetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerUserAction(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerUserEarned(
      _user: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _rt: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerVaultTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeFromStrategies(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeFromStrategiesBatch(
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeFromVaults(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeFromVaultsBatch(
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategiesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyEarnedSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    strategyEarnedSnapshotsLength(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    strategyEarnedSnapshotsTime(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    targetTokenEarned(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userEarned(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vaultRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vaultRewardsLength(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vaultUsersBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vaultUsersQuantity(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
